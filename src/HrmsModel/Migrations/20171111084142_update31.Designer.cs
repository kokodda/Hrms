// <auto-generated />
using HrmsModel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HrmsModel.Migrations
{
    [DbContext(typeof(HrmsDbContext))]
    [Migration("20171111084142_update31")]
    partial class update31
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("HrmsModel.Models.AllowancePolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AllowanceTypeId");

                    b.Property<int>("Amount");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<int?>("GradeGroupId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCompanyPolicy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("JobGradeId");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Remarks");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("isPercentage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("JobGradeId");

                    b.ToTable("AllowancePolicies");
                });

            modelBuilder.Entity("HrmsModel.Models.AllowanceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_AllowanceType_SysCode");

                    b.ToTable("AllowanceTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.Attendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsEndorsed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFullMonth");

                    b.Property<int>("Month");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("date");

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("HrmsModel.Models.AttendanceActionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_AttendanceActionType_SysCode");

                    b.ToTable("AttendanceActionTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.Bank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("HrmsModel.Models.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BreakMinutes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("EffectiveFromDate")
                        .HasColumnType("date");

                    b.Property<string>("FirstWeekDay");

                    b.Property<int>("FlexStartMinutes")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("FromTime")
                        .HasColumnType("datetime");

                    b.Property<int>("HolidaysMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NbrWorkingDays");

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OverTime1Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("OverTime2Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("ThruTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("HrmsModel.Models.Candidate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("AppForm");

                    b.Property<DateTime?>("ApprovedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("FinalScore");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("GovernorateId");

                    b.Property<string>("HomePhone1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone2")
                        .HasMaxLength(50);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHead");

                    b.Property<bool>("IsMale");

                    b.Property<bool>("IsMilitaryExempted");

                    b.Property<bool>("IsSubmitted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("JobName");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MotherName")
                        .HasMaxLength(50);

                    b.Property<int>("NationalityId");

                    b.Property<long>("OrgUnitId");

                    b.Property<string>("OthFamilyName")
                        .HasMaxLength(50);

                    b.Property<string>("OthFatherName")
                        .HasMaxLength(50);

                    b.Property<string>("OthFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("OthJobName");

                    b.Property<string>("OthMotherName")
                        .HasMaxLength(50);

                    b.Property<string>("PermenantAddress")
                        .HasMaxLength(256);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<long?>("PositionId");

                    b.Property<DateTime?>("SubmittedDate")
                        .HasColumnType("date");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NationalityId");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("PositionId");

                    b.ToTable("Candidates");
                });

            modelBuilder.Entity("HrmsModel.Models.CarouselItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BtnCaption")
                        .HasMaxLength(100);

                    b.Property<string>("BtnHref");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImageText");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("OthBtnCaption")
                        .HasMaxLength(100);

                    b.Property<string>("OthCaption")
                        .IsRequired()
                        .HasMaxLength(450);

                    b.Property<string>("OthImageText");

                    b.Property<short>("SortOrder");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CarouselItems");
                });

            modelBuilder.Entity("HrmsModel.Models.Company", b =>
                {
                    b.Property<long>("Id");

                    b.Property<long?>("CalendarId");

                    b.Property<string>("LegalTypeCode")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<byte[]>("Logo");

                    b.Property<string>("OthShortName")
                        .HasMaxLength(10);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountId")
                        .IsRequired();

                    b.Property<long>("OrgUnitId");

                    b.HasKey("Id");

                    b.HasIndex("OrgUnitId");

                    b.ToTable("CompanyAccounts");
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<byte[]>("Logo");

                    b.Property<long?>("MotherOrgUnitId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("MotherOrgUnitId");

                    b.ToTable("CompanyGroups");
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyGroupAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyAccountId");

                    b.Property<long>("CompanyGroupId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyAccountId");

                    b.HasIndex("CompanyGroupId");

                    b.ToTable("CompanyGroupAccounts");
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyGroupMember", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CompanyGroupId");

                    b.Property<long>("CompanyId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("CompanyGroupId");

                    b.HasIndex("CompanyId");

                    b.ToTable("CompanyGroupMembers");
                });

            modelBuilder.Entity("HrmsModel.Models.Competency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetencySubCategoryId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<int?>("GradeGroupId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCompanyPolicy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("JobGradeId");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Remarks");

                    b.Property<string>("Requirements");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompetencySubCategoryId");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("JobGradeId");

                    b.ToTable("Competencies");
                });

            modelBuilder.Entity("HrmsModel.Models.CompetencyAreaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_CompetencyAreaType_SysCode");

                    b.ToTable("CompetencyAreaTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.CompetencyCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("CompetencyCategories");
                });

            modelBuilder.Entity("HrmsModel.Models.CompetencySubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetencyCategoryId");

                    b.Property<string>("Description");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyCategoryId");

                    b.ToTable("CompetencySubCategories");
                });

            modelBuilder.Entity("HrmsModel.Models.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_DocumentType_SysCode");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(256);

                    b.Property<string>("AppForm");

                    b.Property<int?>("BankId");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("BloodGroup")
                        .HasMaxLength(50);

                    b.Property<string>("Branch")
                        .HasMaxLength(100);

                    b.Property<string>("Brief");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("EmpUid");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("GovernorateId");

                    b.Property<string>("HomePhone1")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone2")
                        .HasMaxLength(50);

                    b.Property<string>("IBAN")
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsMale");

                    b.Property<bool>("IsMilitaryExempted");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("MaritalStatus")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("MotherName")
                        .HasMaxLength(50);

                    b.Property<int>("NationalityId");

                    b.Property<string>("OthBrief");

                    b.Property<string>("OthFamilyName")
                        .HasMaxLength(50);

                    b.Property<string>("OthFatherName")
                        .HasMaxLength(50);

                    b.Property<string>("OthFirstName")
                        .HasMaxLength(50);

                    b.Property<string>("OthMotherName")
                        .HasMaxLength(50);

                    b.Property<string>("PermenantAddress")
                        .HasMaxLength(256);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<byte[]>("Photo");

                    b.Property<DateTime?>("ResignationDate")
                        .HasColumnType("date");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GovernorateId");

                    b.HasIndex("NationalityId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeAttendance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttendanceActionTypeId");

                    b.Property<long>("AttendanceId");

                    b.Property<int>("CompliancePercentage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(100);

                    b.Property<long>("EmployeeId");

                    b.Property<int>("FactorValue")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<int>("NbrDays")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PayrollComponentTypeId");

                    b.Property<int>("RequiredMinutes");

                    b.Property<int>("TotalMinutes");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceActionTypeId");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollComponentTypeId");

                    b.ToTable("EmployeeAttendances");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeDocument", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("DocumentTypeId");

                    b.Property<long>("EmployeeId");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Url")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDocuments");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeFamily", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("Contacts")
                        .HasMaxLength(100);

                    b.Property<long>("EmployeeId");

                    b.Property<int>("FamilyMemberTypeId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FamilyMemberTypeId");

                    b.ToTable("EmployeeFamilies");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EmployeeId");

                    b.Property<int>("GenericSubGroupId");

                    b.Property<DateTime>("JoinDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GenericSubGroupId");

                    b.ToTable("EmployeeGroups");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EmployeeId");

                    b.Property<string>("LanguageName")
                        .HasMaxLength(50);

                    b.Property<int>("LanguageTypeId");

                    b.Property<string>("ReadingLevel")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("SpeakingLevel")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("WritingLevel")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LanguageTypeId");

                    b.ToTable("EmployeeLanguages");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeLeave", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("ActualFromDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("ActualThruDate")
                        .HasColumnType("date");

                    b.Property<string>("AppForm");

                    b.Property<string>("Details");

                    b.Property<long>("EmployeeId");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEndorsed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<int>("LeaveTypeId");

                    b.Property<DateTime>("SubmittedDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("ThruDate")
                        .HasColumnType("date");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("EmployeeLeaves");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeLeaveBalance", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnnualEntitlement")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("BalanceDays")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("BalanceHours")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("CarryForward")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<long>("EmployeeId");

                    b.Property<int>("LeaveTypeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("EmployeeLeaveBalances");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeePromotion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BasicSalary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Details")
                        .HasMaxLength(256);

                    b.Property<DateTime>("EffectiveFromDate")
                        .HasColumnType("date");

                    b.Property<long>("EmploymentId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsCancelled")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsIncreasePercentage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("JobGradeId");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<int>("PromotionTypeId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(256);

                    b.Property<int>("SalaryIncreaseValue")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("SalaryStepId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("PromotionTypeId");

                    b.HasIndex("SalaryStepId");

                    b.ToTable("EmployeePromotions");
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeQualification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CompetencyAreaTypeId");

                    b.Property<int?>("CompetencySubCategoryId");

                    b.Property<long>("EmployeeId");

                    b.Property<bool>("IsPlanned")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime?>("ObtainedDate")
                        .HasColumnType("date");

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<int>("QualificationTypeId");

                    b.Property<int?>("TotalYears");

                    b.HasKey("Id");

                    b.HasIndex("CompetencyAreaTypeId");

                    b.HasIndex("CompetencySubCategoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("QualificationTypeId");

                    b.ToTable("EmployeeQualifications");
                });

            modelBuilder.Entity("HrmsModel.Models.Employment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BasicSalary")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<string>("Details")
                        .HasMaxLength(256);

                    b.Property<long>("EmployeeId");

                    b.Property<int>("EmploymentTypeId");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActing")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsAttendRequired")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsHead")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsOverTimeAllowed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsPayrollExcluded")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsProbation")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("JobGradeId");

                    b.Property<long>("OrgUnitId");

                    b.Property<long?>("PositionId");

                    b.Property<string>("Remarks")
                        .HasMaxLength(256);

                    b.Property<int?>("SalaryScaleTypeId");

                    b.Property<int?>("SalaryStepId");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentTypeId");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SalaryScaleTypeId");

                    b.HasIndex("SalaryStepId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("HrmsModel.Models.EmploymentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_EmploymentType_SysCode");

                    b.ToTable("EmploymentTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.FamilyMemberType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_FamilyMemberType_SysCode");

                    b.ToTable("FamilyMemberTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.GenericGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("GenericGroups");
                });

            modelBuilder.Entity("HrmsModel.Models.GenericSubGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<int>("GenericGroupId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("GenericGroupId");

                    b.ToTable("GenericSubGroups");
                });

            modelBuilder.Entity("HrmsModel.Models.Governorate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Governorates");
                });

            modelBuilder.Entity("HrmsModel.Models.GradeGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("GradeGroups");
                });

            modelBuilder.Entity("HrmsModel.Models.Holiday", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FromDay");

                    b.Property<int>("FromMonth");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsHijri")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("NbrDays");

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("HrmsModel.Models.HolidayVariation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CalendarId");

                    b.Property<int>("CompensateNbrDays")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<long>("HolidayId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsComponsated")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Narration")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("NbrDays")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.HasIndex("HolidayId");

                    b.ToTable("HolidayVariations");
                });

            modelBuilder.Entity("HrmsModel.Models.JobGrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("GradeGroupId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<int>("SalaryIncrPctg")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("GradeGroupId");

                    b.ToTable("JobGrades");
                });

            modelBuilder.Entity("HrmsModel.Models.LanguageType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_LanguageType_SysCode");

                    b.ToTable("LanguageTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.LeavePolicy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Description");

                    b.Property<int?>("GradeGroupId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsCompanyPolicy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int?>("JobGradeId");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<int>("LeaveTypeId");

                    b.Property<string>("Remarks");

                    b.Property<int>("TotalDays");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("LeavePolicies");
                });

            modelBuilder.Entity("HrmsModel.Models.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_LeaveType_SysCode");

                    b.ToTable("LeaveTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.Nationality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("Nationalities");
                });

            modelBuilder.Entity("HrmsModel.Models.OrgUnit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<string>("HeadPositionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAttendRequired");

                    b.Property<bool>("IsOverTimeAllowed");

                    b.Property<bool>("IsVacant")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("JobCode")
                        .HasMaxLength(100);

                    b.Property<string>("JobDescription");

                    b.Property<int?>("JobGradeId");

                    b.Property<decimal?>("JobWeight");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<long?>("LineManagerOrgUnitId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("OrgUnitTypeId");

                    b.Property<string>("OthHeadPositionName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long?>("ReportingToOrgUnitId");

                    b.Property<int>("SortOrder");

                    b.Property<int?>("StandardTitleTypeId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("OrgUnitTypeId");

                    b.HasIndex("StandardTitleTypeId");

                    b.ToTable("OrgUnits");
                });

            modelBuilder.Entity("HrmsModel.Models.OrgUnitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_OrgUnitType_SysCode");

                    b.ToTable("OrgUnitTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.Payroll", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttendanceId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsEndorsed")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsExported")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<int>("Month");

                    b.Property<string>("Narration")
                        .HasMaxLength(256);

                    b.Property<long?>("SalaryScaleId");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(100);

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.HasIndex("SalaryScaleId");

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollAddition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("EmployeeId");

                    b.Property<int>("FactorPercent");

                    b.Property<int?>("FromJobGradeId");

                    b.Property<int?>("GradeGroupId");

                    b.Property<bool>("IsCompanyLevel");

                    b.Property<string>("Narration")
                        .HasMaxLength(256);

                    b.Property<int>("PayrollComponentTypeId");

                    b.Property<long>("PayrollId");

                    b.Property<int?>("ThruJobGradeId");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FromJobGradeId");

                    b.HasIndex("GradeGroupId");

                    b.HasIndex("PayrollComponentTypeId");

                    b.HasIndex("PayrollId");

                    b.HasIndex("ThruJobGradeId");

                    b.ToTable("PayrollAdditions");
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollComponentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_PayrollComponentType_SysCode");

                    b.ToTable("PayrollComponentTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollDeduction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("EmployeeId");

                    b.Property<bool>("IsPercentage")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Narration")
                        .HasMaxLength(256);

                    b.Property<int>("NbrDays")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("PayrollComponentTypeId");

                    b.Property<long>("PayrollId");

                    b.Property<int>("Value")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollComponentTypeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PayrollDeductions");
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Amount");

                    b.Property<long>("EmployeeId");

                    b.Property<long>("EmploymentId");

                    b.Property<DateTime?>("FromDate")
                        .HasColumnType("date");

                    b.Property<int>("PayrollComponentTypeId");

                    b.Property<long>("PayrollId");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentId");

                    b.HasIndex("PayrollComponentTypeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("PayrollEmployees");
                });

            modelBuilder.Entity("HrmsModel.Models.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsAttendRequired");

                    b.Property<bool>("IsOverTimeAllowed");

                    b.Property<string>("JobCode")
                        .HasMaxLength(100);

                    b.Property<string>("JobDescription");

                    b.Property<int?>("JobGradeId");

                    b.Property<decimal?>("JobWeight");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<long?>("LineManagerOrgUnitId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<long>("OrgUnitId");

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<long?>("ReportingToOrgUnitId");

                    b.Property<int?>("StandardTitleTypeId");

                    b.Property<int>("TotalVacant")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(1);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("JobGradeId");

                    b.HasIndex("OrgUnitId");

                    b.HasIndex("StandardTitleTypeId");

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("HrmsModel.Models.PromotionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_PromotionType_SysCode");

                    b.ToTable("PromotionTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.QualificationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_QualificationType_SysCode");

                    b.ToTable("QualificationTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.Remuneration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AllowanceTypeId");

                    b.Property<int>("AllowanceValue");

                    b.Property<int>("BasicSalary");

                    b.Property<long>("EmployeeId");

                    b.Property<long>("EmploymentId");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<bool>("IsPercentage");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Narration")
                        .HasMaxLength(256);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AllowanceTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("EmploymentId");

                    b.ToTable("Remunerations");
                });

            modelBuilder.Entity("HrmsModel.Models.SalaryScale", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CompanyId");

                    b.Property<string>("CurrencyCode")
                        .IsRequired()
                        .HasMaxLength(3);

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("date");

                    b.Property<int>("FromJobGradeId");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<int>("MinSalary");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SalaryScaleTypeId");

                    b.Property<DateTime?>("ThruDate")
                        .HasColumnType("date");

                    b.Property<int>("ThruJobGradeId");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FromJobGradeId");

                    b.HasIndex("SalaryScaleTypeId");

                    b.HasIndex("ThruJobGradeId");

                    b.ToTable("SalaryScales");
                });

            modelBuilder.Entity("HrmsModel.Models.SalaryScaleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_SalaryScaleType_SysCode");

                    b.ToTable("SalaryScaleTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.SalaryStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .HasMaxLength(100);

                    b.Property<int>("SalaryIncrPctg")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.ToTable("SalarySteps");
                });

            modelBuilder.Entity("HrmsModel.Models.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("CalendarId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Shifts");
                });

            modelBuilder.Entity("HrmsModel.Models.ShiftGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GenericSubGroupId");

                    b.Property<int>("ShiftId");

                    b.Property<int>("SortOrder");

                    b.HasKey("Id");

                    b.HasIndex("GenericSubGroupId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftGroups");
                });

            modelBuilder.Entity("HrmsModel.Models.ShiftRotation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("FromTime")
                        .HasColumnType("datetime");

                    b.Property<int>("ShiftId");

                    b.Property<string>("ShiftTypeCode")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int>("SortOrder");

                    b.Property<DateTime?>("ThruTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftRotations");
                });

            modelBuilder.Entity("HrmsModel.Models.SiteContent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Details");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("date");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OthCaption")
                        .HasMaxLength(100);

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("SiteContents");
                });

            modelBuilder.Entity("HrmsModel.Models.StandardTitleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("OthName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("SortOrder");

                    b.Property<string>("SysCode")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasAlternateKey("SysCode")
                        .HasName("UK_StandardTitleType_SysCode");

                    b.ToTable("StandardTitleTypes");
                });

            modelBuilder.Entity("HrmsModel.Models.AllowancePolicy", b =>
                {
                    b.HasOne("HrmsModel.Models.AllowanceType", "AllowanceType")
                        .WithMany("AllowancePolicies")
                        .HasForeignKey("AllowanceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.GradeGroup", "GradeGroup")
                        .WithMany("AllowancePolicies")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("AllowancePolicies")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Candidate", b =>
                {
                    b.HasOne("HrmsModel.Models.Governorate", "Governorate")
                        .WithMany("Candidates")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Nationality", "Nationality")
                        .WithMany("Candidates")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.OrgUnit", "OrgUnit")
                        .WithMany("Candidates")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HrmsModel.Models.Position", "Position")
                        .WithMany("Candidates")
                        .HasForeignKey("PositionId");
                });

            modelBuilder.Entity("HrmsModel.Models.Company", b =>
                {
                    b.HasOne("HrmsModel.Models.Calendar", "Calendar")
                        .WithMany("Companies")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.OrgUnit", "OrgUnit")
                        .WithOne("Company")
                        .HasForeignKey("HrmsModel.Models.Company", "Id")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyAccount", b =>
                {
                    b.HasOne("HrmsModel.Models.OrgUnit", "OrgUnit")
                        .WithMany("CompanyAccounts")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyGroup", b =>
                {
                    b.HasOne("HrmsModel.Models.OrgUnit", "OrgUnit")
                        .WithMany("CompanyGroups")
                        .HasForeignKey("MotherOrgUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyGroupAccount", b =>
                {
                    b.HasOne("HrmsModel.Models.CompanyAccount", "CompanyAccount")
                        .WithMany("CompanyGroupAccounts")
                        .HasForeignKey("CompanyAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.CompanyGroup", "CompanyGroup")
                        .WithMany("CompanyGroupAccounts")
                        .HasForeignKey("CompanyGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.CompanyGroupMember", b =>
                {
                    b.HasOne("HrmsModel.Models.CompanyGroup", "CompanyGroup")
                        .WithMany("CompanyGroupMembers")
                        .HasForeignKey("CompanyGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Company", "Company")
                        .WithMany("CompanyGroupMembers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Competency", b =>
                {
                    b.HasOne("HrmsModel.Models.CompetencySubCategory", "CompetencySubCategory")
                        .WithMany("Competencies")
                        .HasForeignKey("CompetencySubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.GradeGroup", "GradeGroup")
                        .WithMany("Competencies")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("Competencies")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.CompetencySubCategory", b =>
                {
                    b.HasOne("HrmsModel.Models.CompetencyCategory", "CompetencyCategory")
                        .WithMany("CompetencySubCategories")
                        .HasForeignKey("CompetencyCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Employee", b =>
                {
                    b.HasOne("HrmsModel.Models.Governorate", "Governorate")
                        .WithMany("Employees")
                        .HasForeignKey("GovernorateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Nationality", "Nationality")
                        .WithMany("Employees")
                        .HasForeignKey("NationalityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeAttendance", b =>
                {
                    b.HasOne("HrmsModel.Models.AttendanceActionType", "AttendanceActionType")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("AttendanceActionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HrmsModel.Models.Attendance", "Attendance")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.PayrollComponentType", "PayrollComponentType")
                        .WithMany("EmployeeAttendances")
                        .HasForeignKey("PayrollComponentTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeDocument", b =>
                {
                    b.HasOne("HrmsModel.Models.DocumentType", "DocumentType")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeDocuments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeFamily", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeFamilies")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.FamilyMemberType", "FamilyMemberType")
                        .WithMany("EmployeeFamilies")
                        .HasForeignKey("FamilyMemberTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeGroup", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeGroups")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HrmsModel.Models.GenericSubGroup", "GenericSubGroup")
                        .WithMany("EmployeeGroups")
                        .HasForeignKey("GenericSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeLanguage", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeLanguages")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.LanguageType", "LanguageType")
                        .WithMany("EmployeeLanguages")
                        .HasForeignKey("LanguageTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeLeave", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeLeaves")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.LeaveType", "LeaveType")
                        .WithMany("EmployeeLeaves")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeLeaveBalance", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeLeaveBalances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.LeaveType", "LeaveType")
                        .WithMany("EmployeeLeaveBalances")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeePromotion", b =>
                {
                    b.HasOne("HrmsModel.Models.Employment", "Employment")
                        .WithMany("EmployeePromotions")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("EmployeePromotions")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.PromotionType", "PromotionType")
                        .WithMany("EmployeePromotions")
                        .HasForeignKey("PromotionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HrmsModel.Models.SalaryStep", "SalaryStep")
                        .WithMany("EmployeePromotions")
                        .HasForeignKey("SalaryStepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.EmployeeQualification", b =>
                {
                    b.HasOne("HrmsModel.Models.CompetencyAreaType", "CompetencyAreaType")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("CompetencyAreaTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.CompetencySubCategory", "CompetencySubCategory")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("CompetencySubCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.QualificationType", "QualificationType")
                        .WithMany("EmployeeQualifications")
                        .HasForeignKey("QualificationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Employment", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("Employments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.EmploymentType", "EmploymentType")
                        .WithMany("Employments")
                        .HasForeignKey("EmploymentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("Employments")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.OrgUnit", "OrgUnit")
                        .WithMany("Employments")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Position", "Position")
                        .WithMany("Employments")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.SalaryScaleType", "SalaryScaleType")
                        .WithMany("Employments")
                        .HasForeignKey("SalaryScaleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.SalaryStep", "SalaryStep")
                        .WithMany("Employments")
                        .HasForeignKey("SalaryStepId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.GenericSubGroup", b =>
                {
                    b.HasOne("HrmsModel.Models.GenericGroup", "GenericGroup")
                        .WithMany("GenericSubGroups")
                        .HasForeignKey("GenericGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HrmsModel.Models.HolidayVariation", b =>
                {
                    b.HasOne("HrmsModel.Models.Calendar", "Calendar")
                        .WithMany("HolidayVariations")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Holiday", "Holiday")
                        .WithMany("HolidayVariations")
                        .HasForeignKey("HolidayId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.JobGrade", b =>
                {
                    b.HasOne("HrmsModel.Models.GradeGroup", "GradeGroup")
                        .WithMany("JobGrades")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.LeavePolicy", b =>
                {
                    b.HasOne("HrmsModel.Models.GradeGroup", "GradeGroup")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.LeaveType", "LeaveType")
                        .WithMany("LeavePolicies")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.OrgUnit", b =>
                {
                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("OrgUnits")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.OrgUnitType", "OrgUnitType")
                        .WithMany("OrgUnits")
                        .HasForeignKey("OrgUnitTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.StandardTitleType", "StandardTitleType")
                        .WithMany("OrgUnits")
                        .HasForeignKey("StandardTitleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Payroll", b =>
                {
                    b.HasOne("HrmsModel.Models.Attendance", "Attendance")
                        .WithMany("Payrolls")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.SalaryScale", "SalaryScale")
                        .WithMany("Payrolls")
                        .HasForeignKey("SalaryScaleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollAddition", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("PayrollAdditions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "FromJobGrade")
                        .WithMany("FromPayrollAdditions")
                        .HasForeignKey("FromJobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.GradeGroup", "GradeGroup")
                        .WithMany("PayrollAdditions")
                        .HasForeignKey("GradeGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.PayrollComponentType", "PayrollComponentType")
                        .WithMany("PayrollAdditions")
                        .HasForeignKey("PayrollComponentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Payroll", "Payroll")
                        .WithMany("PayrollAdditions")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "ThruJobGrade")
                        .WithMany("ThruPayrollAdditions")
                        .HasForeignKey("ThruJobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollDeduction", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("PayrollDeductions")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.PayrollComponentType", "PayrollComponentType")
                        .WithMany("PayrollDeductions")
                        .HasForeignKey("PayrollComponentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Payroll", "Payroll")
                        .WithMany("PayrollDeductions")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.PayrollEmployee", b =>
                {
                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("PayrollEmployees")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Employment", "Employment")
                        .WithMany("PayrollEmployees")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.PayrollComponentType", "PayrollComponentType")
                        .WithMany("PayrollEmployees")
                        .HasForeignKey("PayrollComponentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Payroll", "Payroll")
                        .WithMany("PayrollEmployees")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Position", b =>
                {
                    b.HasOne("HrmsModel.Models.JobGrade", "JobGrade")
                        .WithMany("Positions")
                        .HasForeignKey("JobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.OrgUnit", "OrgUnit")
                        .WithMany("Positions")
                        .HasForeignKey("OrgUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.StandardTitleType", "StandardTitleType")
                        .WithMany("Positions")
                        .HasForeignKey("StandardTitleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Remuneration", b =>
                {
                    b.HasOne("HrmsModel.Models.AllowanceType", "AllowanceType")
                        .WithMany("Remunerations")
                        .HasForeignKey("AllowanceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Employee", "Employee")
                        .WithMany("Remunerations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.Employment", "Employment")
                        .WithMany("Remunerations")
                        .HasForeignKey("EmploymentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.SalaryScale", b =>
                {
                    b.HasOne("HrmsModel.Models.Company", "Company")
                        .WithMany("SalaryScales")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "FromJobGrade")
                        .WithMany("FromGradeSalaryScales")
                        .HasForeignKey("FromJobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.SalaryScaleType", "SalaryScaleType")
                        .WithMany("SalaryScales")
                        .HasForeignKey("SalaryScaleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HrmsModel.Models.JobGrade", "ThruJobGrade")
                        .WithMany("ThruGradeSalaryScales")
                        .HasForeignKey("ThruJobGradeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.Shift", b =>
                {
                    b.HasOne("HrmsModel.Models.Calendar", "Calendar")
                        .WithMany("Shifts")
                        .HasForeignKey("CalendarId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("HrmsModel.Models.ShiftGroup", b =>
                {
                    b.HasOne("HrmsModel.Models.GenericSubGroup", "GenericSubGroup")
                        .WithMany("ShiftGroups")
                        .HasForeignKey("GenericSubGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HrmsModel.Models.Shift", "Shift")
                        .WithMany("ShiftGroups")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HrmsModel.Models.ShiftRotation", b =>
                {
                    b.HasOne("HrmsModel.Models.Shift", "Shift")
                        .WithMany("ShiftRotations")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
